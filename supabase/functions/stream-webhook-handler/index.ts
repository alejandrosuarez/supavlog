// Type definitions generated by Hookdeck
interface Body {
  type: string;
  created_at: string;
  call_cid: string;
  call_recording: Callrecording;
}
interface Callrecording {
  filename: string;
  url: string;
  start_time: string;
  end_time: string;
}

import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

// Create Supabase client
const supabase = createClient(
  Deno.env.get("NEXT_PUBLIC_SUPABASE_URL"),
  Deno.env.get("X_SUPABASE_API_SECRET")
);

// Upload file using standard upload
async function uploadFile(filePath: string, file: ArrayBuffer) {
  const { data, error } = await supabase.storage
    .from("videos")
    .upload(filePath, file);
  if (error) {
    console.error(error);
    throw error;
  }
}

Deno.serve(async (req) => {
  const body: Body = await req.json();

  if (body.type !== "call.recording_ready") {
    console.log("not a call recording, skipping");
    return new Response(
      JSON.stringify({
        success: false,
        message: "Was not a call.recording_ready type event",
      }),
      {
        headers: { "Content-Type": "application/json" },
      }
    );
  }
  console.log("processing webook", { body });

  const streamUrl = decodeURI(body.call_recording.url);
  console.log("requesting stream url", streamUrl);
  const streamFilename = body.call_recording.filename;

  const download = await fetch(streamUrl);
  console.log("Downloaded video");
  if (download.status !== 200) {
    return new Response(JSON.stringify({ success: false }), {
      headers: { "Content-Type": "application/json" },
      status: download.status,
    });
  }

  try {
    const buffer = await download.arrayBuffer();
    await uploadFile(streamFilename, buffer);

    return new Response(JSON.stringify({ success: true }), {
      headers: { "Content-Type": "application/json" },
      status: 201,
    });
  } catch (e) {
    console.error(e);
    return new Response(JSON.stringify({ success: false }), {
      headers: { "Content-Type": "application/json" },
      status: 500,
    });
  }
});
